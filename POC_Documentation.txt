SYSTEM REQUIREMENTS
PRODUCTION SYSTEM (Based on Dell Latitude E6530 Laptop)
    Minimum Hardware
        - Computer 
            - CPU: Intel i7-3540M
            - GPU: Intel 3rd Gen Core processor Graphics Contr
            - RAM: 8GB
        - Webcam 
    Minimum Software
        - OS: Linux (Kernel: 6.1.60-1-MANJARO), Windows 11 
        - Browser: Google Chrome Version 119.0.6045.123
        - Python 3.11.5
        - Packages: (refer to Requirements.txt)
DEVELOPMENT SYSTEM (Based on Acer Aspire 3 Laptop)
    Minimum Hardware
        - Computer
            - CPU: Intel® N6000 processor Quad-core
            - GPU: Intel® UHD Graphics shared memory
            - RAM: 8GB
    Software Hardware
        - Browser: Google Chrome Version 119.0.6045.123
        - Dataset Management: Roboflow
        - IDE: VS Code, Google Colab
        - Packages: (refer to Requirements.txt)


INSTALLATION
Global Requirements for the system:
    - Git
    - Python
    - pip
    - virtualenv (optional)
STEPS
Step 1 -  Go to Github Repository: (Github Link Here)
Step 2 - Clone Repository to desired location. ( Make sure you have git installed in your system )
    > git clone <Github-link>
Step 3 - Go to project directory and install packages according to the requirements.txt 
         using 'pip install -r requirements.txt'
    Note: It is best practice to separate packages from the global system to avoid 
    dependencies conflict with other projects. To do this, create a virtual environment 
    first instead of directly doing 'pip install' 
    > pyhton -m venv <virtualenv-name>
    Then, activate the virtual environmentwith te following Code:
    (in Windows CMD)        > virtualenv-name/Scripts/activate.bat
    (in Windows Powershell) > virtualenv-name/Scripts/activate.ps1
    (in Linux Terminal)     > source /virtualenv-name/bin/activate
    Lastly, install packages to vertual environment
    > pip install -r requirements.txt
    You'll know the packages installed in the Virtual environment when the packages
    are found in the lib/ directory of the VirtualEenvironment folder
Step 4 - Proceed to Application Execution Part of the Documentation to ruun the program 

CODE IMPLEMENTATION
The Codebase is mostly pyhton-based due to the WebApp's Backend runs on Flask Framework
as well as the ultralytics packages running the model for object detection. The Frontend 
of the WebApp However runs on Simple HTML, CSS, and Javascript Code. The reason for this
is that the team desires to decrease load on the system which can in theory increase the
performance of the WebApp, Especially since the hardware used to develop and to test the 
program are considered as on the lower end when it comes to performance. Since The system
will ask for the usage of the webcam, OpenCV is also a library used for optimizing Computer 
vision to help with machine learning.

The file structure only consist of these objects:
    > templates/ - a directory that contains all the templates to be rendered by the Flask Backend, along with their repective CSS and Javascript Files if included
        index.html - main Entry point of the WebApp
    > app.py - The pyhton backend file that renders the frontend code located in the templates/ directory.
    > finalBest.pt - the .pt file is a model that is generated after a certain time of training with YOLOv8 Object detection.  
    > POC_Documentation - This file.
    > requirements.txt - the text file containing all the packages required to make the WebApp work. run 'pip install -r requirements.txt' to download these packages

MODEL TRAINING IMPLEMENTATION

APPLICATION EXECUTION
